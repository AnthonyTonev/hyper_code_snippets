{
        "title": "react_tic_tac_toe",
        "description": "",
        "files":["react.js","index.html"],
        "code":"{\"0\":\"const { useState, useEffect, createContext, useContext } = React;\\nconst scoresContext = createContext([0, 0]);\\nconst matrix = (x, y, v) =>\\n  Array(x)\\n    .fill(0)\\n    .map((g) => Array(y).fill(v));\\nconst CHARS = [\\\"O\\\", \\\"X\\\"];\\nconst COLORS = [\\\"#1589FF\\\", \\\"#FF0043\\\"];\\nconst victoryFields = [\\n  { x: [0, 0, 0], y: [0, 1, 2] },\\n  { x: [1, 1, 1], y: [0, 1, 2] },\\n  { x: [2, 2, 2], y: [0, 1, 2] },\\n\\n  { x: [0, 1, 2], y: [0, 1, 2] },\\n  { x: [2, 1, 0], y: [0, 1, 2] },\\n\\n  { x: [0, 1, 2], y: [0, 0, 0] },\\n  { x: [0, 1, 2], y: [1, 1, 1] },\\n  { x: [0, 1, 2], y: [2, 2, 2] },\\n];\\n\\nconst playerWin = (grid, player, callback) => {\\n  const cells = victoryFields.find((curr) =>\\n    [\\n      grid[curr.x[0]][curr.y[0]],\\n      grid[curr.x[1]][curr.y[1]],\\n      grid[curr.x[2]][curr.y[2]],\\n    ].every((g) => g === player)\\n  );\\n  if (cells) {\\n    callback(cells);\\n    return true;\\n  } else return false;\\n};\\nconst nobodyWins = (turnCount, callback) => {\\n  if (turnCount === 9) {\\n    callback();\\n    return true;\\n  } else return false;\\n};\\nconst colorWinningCells = (grid, cells, color) => {\\n  const winnerGrid = [...grid];\\n  winnerGrid[cells.x[0]][cells.y[0]] = color;\\n  winnerGrid[cells.x[1]][cells.y[1]] = color;\\n  winnerGrid[cells.x[2]][cells.y[2]] = color;\\n  return winnerGrid;\\n};\\nconst TicTacToe = ({ autoReset }) => {\\n  const [winnerCells, setWinnerCells] = useState(null);\\n  const scores = useContext(scoresContext);\\n  const setScore = (player, score) => (scores[player] = score);\\n  const [loading, setLoading] = useState(true);\\n  const [turn, setTurn] = useState(null);\\n  const [grid, setGrid] = useState([]);\\n  const [message, setMessage] = useState(\\\"\\\\u00a0\\\");\\n  const [count, setCount] = useState(1);\\n  const [block, blockGame] = useState(true);\\n  useEffect(() => {\\n    setWinnerCells(null);\\n    setTurn(0);\\n    setCount(1);\\n    setGrid(matrix(3, 3, null));\\n    setLoading(false);\\n    blockGame(false);\\n  }, [loading]);\\n\\n  const playTurn = (i, j, el) => {\\n    if (!block && grid[i][j] === null) {\\n      grid[i][j] = turn;\\n      el.textContent = CHARS[turn];\\n      el.style.color = COLORS[turn];\\n      setGrid(grid);\\n      if (\\n        playerWin(grid, turn, (cells) => {\\n          setMessage(`player ${CHARS[turn]} wins`);\\n          setScore(turn, scores[turn] + 1);\\n          setWinnerCells(colorWinningCells(grid, cells, COLORS[turn]));\\n        }) ||\\n        nobodyWins(count, () => setMessage(\\\"Nobody wins\\\"))\\n      ) {\\n        blockGame(true);\\n        setTimeout(() => {\\n          if (autoReset) {\\n            setLoading(true);\\n            setMessage(\\\"\\\\u00a0\\\");\\n          }\\n        }, 2000);\\n      }\\n      setTurn(1 - turn);\\n      setCount(count + 1);\\n    }\\n  };\\n  const cellSize = 200;\\n  return (\\n    !loading && (\\n      <div\\n        style={{\\n          filter: `grayScale(${block && !autoReset ? 60 : 0}%)`,\\n          textAlign: \\\"center\\\",\\n          grid: \\\"auto\\\",\\n          maxWidth: (cellSize + cellSize * 0.2) * 3 + \\\"px\\\",\\n        }}\\n      >\\n        {matrix(3, 3, 0).map((row, i) =>\\n          row.map((col, j) => (\\n            <button\\n              onClick={(e) => playTurn(i, j, e.target)}\\n              style={{\\n                width: cellSize + \\\"px\\\",\\n                height: cellSize + \\\"px\\\",\\n                margin: 0.3 + \\\"%\\\",\\n                background: \\\"transparent\\\",\\n                border:\\n                  \\\"2px solid \\\" +\\n                  (winnerCells !== null ? winnerCells[i][j] : \\\"white\\\"),\\n                color: \\\"white\\\",\\n                fontWeight: 900,\\n                fontSize: \\\"55px\\\",\\n                cursor: \\\"pointer\\\",\\n              }}\\n              key={i + j}\\n            >\\n              {\\\"\\\\u00a0\\\"}\\n            </button>\\n          ))\\n        )}\\n        <p\\n          style={{\\n            color: \\\"white\\\",\\n            fontSize: \\\"30px\\\",\\n            fontFamily: \\\"Consolas\\\",\\n            fontWeight: 900,\\n          }}\\n        >\\n          {message}\\n        </p>\\n        <pre\\n          style={{\\n            textAlign: \\\"center\\\",\\n            color: \\\"white\\\",\\n            fontSize: \\\"30px\\\",\\n            fontFamily: \\\"Consolas\\\",\\n            fontWeight: 900,\\n          }}\\n        >\\n          {`Turn:${count}\\\\n${scores\\n            .map((s, i) => `${CHARS[i]}:${s}`)\\n            .join(\\\" / \\\")}`}\\n        </pre>\\n      </div>\\n    )\\n  );\\n};\\n\\nReactDOM.render(\\n  <React.StrictMode>\\n    <TicTacToe autoReset={true} />\\n  </React.StrictMode>,\\n  document.getElementById(\\\"root\\\")\\n);\\n\",\"1\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Document</title>\\n   <style>\\n     body{\\n      background:black;\\n     }\\n  </style>\\n</head>\\n \\n<body>\\n<script src=\\\"https://unpkg.com/@babel/standalone/babel.min.js\\\"></script>  \\n<script crossorigin src=\\\"https://unpkg.com/react@17/umd/react.production.min.js\\\"></script>\\n<script crossorigin src=\\\"https://unpkg.com/react-dom@17/umd/react-dom.production.min.js\\\"></script>\\n <script type=\\\"text/babel\\\" data-type=\\\"module\\\" src=\\\"./react.js\\\"></script>\\n  <div id=\\\"root\\\"></div>\\n</body>\\n\\n</html>\"}"
}
