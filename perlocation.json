{
        "title": "perlocation",
        "description": "",
        "files":["main.js","index.html"],
        "code":"{\"0\":\"\\n\\n\\n\\n class WeightedQuickUnionUF{\\n\\tconstructor(N){\\n\\tthis.count = N;\\n\\tthis.id = [];\\n\\tthis.sz = [];\\n\\tthis.initNumArr();\\n\\t\\n\\t}\\n\\n\\tinitNumArr(){\\n\\t\\tfor(let i=0;i<this.count;i++){\\n\\t\\tthis.id [i]=i;\\n\\t\\tthis.sz [i]=i;\\n\\t\\t\\t}\\n\\t}\\n\\n\\n\\tfind(p){\\n\\t\\twhile(p!= this.id[p]){\\n\\t\\t\\tp = this.id[p];\\n\\t\\t}\\n\\t\\treturn p;\\n\\t}\\n\\t\\n\\tconnected(p,q){\\n\\t\\treturn this.find(p) === this.find(q);\\n\\t}\\n\\t\\n\\tunion(p,q){\\n\\tlet rootP = this.find(p);\\n\\tlet rootQ = this.find(q);\\n\\tif(rootP === rootQ) return;\\n\\t\\tif(this.sz[rootP] < this.sz[rootQ]){\\n\\t\\t\\tthis.id[rootP] = rootQ; this.sz[rootQ] +=this.sz[rootP];\\n\\t\\t}else{\\n\\t\\t\\tthis.id[rootQ] = rootP; this.sz[rootP] +=this.sz[rootQ];\\n\\t\\t}\\t\\n\\t\\t\\tthis.count--;\\n\\t}\\t\\n\\t\\n}\\n\\n\\n\\nclass Percolation{\\n\\t\\tconstructor(N){\\n\\t\\tthis.N = N;\\n\\t\\tthis.size = N;\\n\\t\\t\\n\\t\\tthis.uf = new WeightedQuickUnionUF(N*N+2);\\n\\t\\tthis.topUF = this.uf;\\n\\t\\tthis.opened = new Array(this.N*this.N);\\n\\t\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\t\\n\\t\\txyTo1D(i,j){\\n\\t\\t\\treturn this.size*(i-1)+j;\\n\\t\\t}\\n\\t\\t\\n\\t\\t  // Open a site uniformly at random within the grid\\n\\t\\topenRandom(){\\n        // Generate random integers between 1 and N\\n        var i = Math.floor(Math.random() * this.N + 1);\\n        var j = Math.floor(Math.random() * this.N + 1);\\n\\n        if (this.isOpen(i, j)) {\\n            this.openRandom();\\n        } else {\\n            this.open(i, j);\\n            return;\\n        }\\n    }\\n\\t\\t\\n\\t\\t\\n\\t\\topen(i,j){\\n\\t\\t\\tthis.opened[this.xyTo1D(i,j)] = true;\\n\\t\\tif(i!=1&& this.isOpen(i-1,j)){\\n\\t\\t\\tthis.uf.union(this.xyTo1D(i,j),this.xyTo1D(i-1,j));\\n\\t\\t\\tthis.topUF.union(this.xyTo1D(i,j),this.xyTo1D(i-1,j));\\n\\t\\t}\\n\\t\\tif(i!=this.size && this.isOpen(i+1,j)){\\n\\t\\t\\tthis.uf.union(this.xyTo1D(i,j),this.xyTo1D(i+1,j));\\n\\t\\t\\tthis.topUF.union(this.xyTo1D(i,j),this.xyTo1D(i+1,j));\\n\\t\\t}\\n\\t\\tif(j!=1 && this.isOpen(i,j-1)){\\n\\t\\t\\tthis.uf.union(this.xyTo1D(i,j),this.xyTo1D(i,j-1));\\n\\t\\t\\tthis.topUF.union(this.xyTo1D(i,j), this.xyTo1D(i,j - 1));\\n\\t\\t}\\n\\t\\tif(j!=this.size && this.isOpen(i,j + 1)){\\n\\t\\t\\tthis.uf.union(this.xyTo1D(i,j),this.xyTo1D(i,j + 1));\\n\\t\\t\\tthis.topUF.union(this.xyTo1D(i,j),this.xyTo1D(i,j + 1));\\n\\t\\t}\\n\\t\\tif(i===1){\\n\\t\\t\\tthis.uf.union(this.xyTo1D(i,j),0);\\n\\t\\t\\tthis.topUF.union(this.xyTo1D(i,j),0);\\n\\t\\t}\\n\\t\\tif(i===this.size){\\n\\t\\t\\tthis.uf.union(this.xyTo1D(i,j),this.size*this.size+1);\\n\\t\\t\\t}\\n\\t\\t}\\t\\n\\t\\n\\t\\tisOpen(i,j){\\n\\t\\t\\treturn this.opened[this.xyTo1D(i,j)];\\n\\t\\t}\\n\\t\\t\\n\\t\\n\\t\\t\\n\\t\\tisFull(i,j){\\n\\t\\t\\treturn this.topUF.connected(this.xyTo1D(i,j),0);\\n\\t\\t}\\n\\t\\t\\n\\t\\t\\n\\t\\tpercolates(){\\n\\t\\t\\treturn this.uf.connected(0,this.size*this.size+1);\\t\\n\\t\\t}\\t\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction runTest(N, amount) {\\n    \\n    var t0 = performance.now();\\n    console.log(\\\"The average is: \\\" + getAverage(N, amount));\\n    var t1 = performance.now();\\n\\n    console.log(\\\"Calculating the average took \\\" + (t1 - t0) + \\\" milliseconds.\\\");\\n}\\n\\n\\nrunTest(20, 100);\\n\\n// Draw grid to canvas.  Called repeatedly from simulatePercolation.\\nfunction draw(N,perc) {\\n    var canvas = document.getElementById('animation');\\n    var ctx = canvas.getContext('2d');\\n    var canvasSize = canvas.width; // = height because square canvas assumed\\n    var siteSize = Math.floor(canvasSize / N);\\n    var firstSiteLocation = (canvasSize - siteSize * N) / 2;  // Centering\\n    \\n    // Helper function to convert row/col nums to grid locations\\n    function loc(coordinate) {\\n        return firstSiteLocation + (coordinate - 1) * siteSize\\n    }\\n    \\n    ctx.fillStyle=\\\"grey\\\";\\n    ctx.fillRect(0,0,canvasSize,canvasSize);\\n    this.drawGrid = function() {\\n        for (var row = 1; row < N + 1; row++) {\\n            for (var col = 1; col < N + 1; col++) {\\n                if (perc.isFull(row, col)) {\\n                    ctx.fillStyle = \\\"#6699FF\\\"; // Full sites are blue\\n                    ctx.fillRect(loc(col), loc(row), siteSize, siteSize); \\n                } else if (perc.isOpen(row, col)) {\\n                    ctx.fillStyle = \\\"white\\\";  // Open sites are white\\n                    ctx.fillRect(loc(col), loc(row), siteSize, siteSize);\\n                } else {\\n                    ctx.fillStyle = \\\"black\\\";  // Closed sites are black\\n                    ctx.fillRect(loc(col), loc(row), siteSize, siteSize);\\n                } \\n            }\\n        }\\n    }\\n}\\n\\n// Main function.  Open sites randomly until percolation, calling draw with each open.\\nfunction simulatePercolation() {\\n    // Remove output from last run if it exists\\n    document.getElementById(\\\"percolates\\\").innerHTML = \\\"\\\";\\n    clearInterval(interval);\\n    \\n    // User inputs.  The + forces the values to be numeric:\\n    var N = +document.getElementById(\\\"gridSize\\\").value;\\n    var radios = document.getElementsByName('speed');\\n    for (var i = 0, length = radios.length; i < length; i++) {\\n        if (radios[i].checked) {\\n            if (radios[i].value == \\\"instant\\\") { var delay = 0; }\\n            else if (radios[i].value == \\\"fast\\\") { var delay = 5; }\\n            else if (radios[i].value == \\\"slow\\\") { var delay = 500; }\\n            break;\\n        }\\n    }\\n\\n    // Creating instances of \\\"classes\\\"\\n    var perc = new Percolation(N);\\n    var drawPerc = new draw(N,perc);\\n    var count = 0; // Should output to screen when simulation is finished\\n\\n    // Open a site uniformly at random within the grid\\n    function openRandom() {\\n        // Generate random integers between 1 and N\\n        var i = Math.floor(Math.random() * N + 1);\\n        var j = Math.floor(Math.random() * N + 1);\\n\\n        if (perc.isOpen(i, j)) {\\n            openRandom();\\n        } else {\\n            perc.open(i, j);\\n            return;\\n        }\\n    }\\n\\n    // Open random sites and re-draw grid until system percolates\\n    function checkPerc() {\\n        if (!perc.percolates()) {\\n            openRandom();\\n            count++;\\n            drawPerc.drawGrid();\\n        } else {\\n            clearInterval(interval);\\n            var percentage = parseFloat((count * 100) / (N * N)).toFixed(2);\\n            var outstring = \\\"The system percolates after opening \\\" + count + \\n            \\\" sites. The percentage of open sites is \\\" + percentage + \\\"%\\\";\\n            document.getElementById(\\\"percolates\\\").innerHTML = outstring;\\n        }\\n    }\\n\\n    // Runs a while loop until system percolates then outputs to screen\\n    function outputInstantly() {\\n        while (!perc.percolates()) {\\n            openRandom();\\n            count++;\\n        }\\n        drawPerc.drawGrid();\\n        var percentage = parseFloat((count * 100) / (N * N)).toFixed(2);\\n        var outstring = \\\"The system percolates after opening \\\" + count + \\n        \\\" sites. The percentage of open sites is \\\" + percentage + \\\"%\\\";\\n        document.getElementById(\\\"percolates\\\").innerHTML = outstring;\\n    }\\n\\n    // If no delay, draw instantly.  Otherwise, draw with setInterval and delay\\n    if (delay === 0) {\\n        outputInstantly();\\n    } else {\\n        // Use setInterval to repeatedly call checkPerc until system percolates \\n        interval = setInterval(checkPerc, delay);\\n        interval();\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n\\nfunction getAverage(N, amount){\\n    let openTiles = [];\\n\\n    for (var i = 0; i < amount; i++) {\\n        let perc = new Percolation(N);\\n        let count = 0;\\n    \\n        while (!perc.percolates()) {\\n            perc.openRandom();\\n            count++;\\n        }\\n    \\n        openTiles.push(count);\\n    }\\n\\n    var sum = openTiles.reduce(function(a, b) { return a + b; });\\n    let averageCount = sum / openTiles.length;\\n    let averagePercolationThreshold = averageCount / (N**2);\\n\\n    return averagePercolationThreshold;\\n}\\n\",\"1\":\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <script>var interval = null;</script> <!--This lets me clear the interval to avoid duplicate runs on refresh -->\\n</head>\\n\\n<style>\\ncanvas {\\n    border: 1px solid black;\\n    border-radius: 10px;\\n    padding-left: 0;\\n    padding-right: 0;\\n    display: block;\\n}\\n\\nform {\\n    width: 200px;\\n    padding: 1em;\\n    border: 1px solid black;\\n    border-radius: 10px;\\n    margin-bottom: 30px; \\n    clear: both;\\n}\\n\\nform div + div {\\n    margin-top: 1em;\\n}\\n\\n#gridSize {\\n    border-radius: 5px;\\n}\\n</style>\\n\\n<body>\\n<div id=\\\"content\\\">\\n\\n<form id=\\\"inputs\\\">\\n    <div>\\n    \\t<label>Grid Size (600 Max):</label><br>\\n    \\t<input type=\\\"text\\\" id=\\\"gridSize\\\" value=\\\"20\\\", maxlength=\\\"3\\\", size=\\\"3\\\">\\n    </div>\\n    <div>\\n\\t<label>Speed:</label><br>\\n\\t<input type=\\\"radio\\\" name=\\\"speed\\\" value=\\\"instant\\\">Instant\\n\\t<input type=\\\"radio\\\" name=\\\"speed\\\" value=\\\"fast\\\" checked>Fast\\n\\t<input type=\\\"radio\\\" name=\\\"speed\\\" value=\\\"slow\\\">Slow\\n    </div>\\n    <div>\\n\\t<button type='button' id=\\\"button\\\" onclick=\\\"return simulatePercolation()\\\">Run Simulation</button>\\n    </div> \\n</form>\\n\\n<canvas id=\\\"animation\\\" width=\\\"600\\\" height=\\\"600\\\">\\n    Percolation Visualization (include img)\\n</canvas>\\n\\n<p id=\\\"percolates\\\"></p>\\n<br>\\n\\n</div>\\n<script src=\\\"./main.js\\\"></script>\\n</body>\\n</html>\\n\"}"
}
