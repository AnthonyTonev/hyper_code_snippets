{
        "title": "Grouping_DIshes",
        "description": "",
        "code":"// Solution 1\nconst groupingDishes = function (dishes) {\n  const storage = new Map();\n\n  for (let i = 0; i < dishes.length; i++) {\n    for (let j = 1; j < dishes[i].length; j++) {\n      if (!storage.has(dishes[i][j])) {\n        storage.set(dishes[i][j], [dishes[i][0]]);\n      } else {\n        const storageArray = storage.get(dishes[i][j]);\n        storageArray.push(dishes[i][0]);\n        storage.set(dishes[i][j], storageArray);\n      }\n    }\n  }\n\n  const groupedDishes = [];\n\n  for (const element of storage) {\n    if (element[1].length < 2) {\n      storage.delete(element[0]);\n    } else {\n      element[1].sort();\n      groupedDishes.push(element.flat(1));\n    }\n  }\n\n  groupedDishes.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n\n    return 0;\n  });\n\n  return groupedDishes;\n};\n\n// Solution 2\nconst groupingDishes = (dishes) => {\n  const storage = {};\n\n  for (let i = 0; i < dishes.length; i++) {\n    for (let j = 1; j < dishes[i].length; j++) {\n      if (storage[dishes[i][j]]) {\n        storage[dishes[i][j]].push(dishes[i][0]);\n      } else {\n        storage[dishes[i][j]] = [dishes[i][0]];\n      }\n    }\n  }\n\n  const groupedDishes = [];\n\n  for (let element in storage) {\n    if (storage[element].length >= 2) {\n      storage[element].sort();\n      groupedDishes.push([element, ...storage[element]]);\n    }\n  }\n\n  groupedDishes.sort((a, b) => (a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0));\n\n  return groupedDishes;\n};"
}
