{
        "title": "curve_editor_2",
        "description": "new one",
        "code":"{\"0\":\"{\\n        \\\"title\\\": \\\"index.html\\\",\\n        \\\"description\\\": \\\"\\\",\\n        \\\"code\\\":\\\"<!DOCTYPE html>\\\\n<style>\\\\n@import url(https://fonts.googleapis.com/css?family=Open+Sans:400,600);\\\\n\\\\nhtml {\\\\n    font-size: 16px;\\\\n    font-family: \\\\\\\"Open Sans\\\\\\\", sans-serif;\\\\n}\\\\n\\\\nhtml,\\\\nbody {\\\\n    height: 100%;\\\\n\\\\n}\\\\n\\\\n.ad-App {\\\\n    height: 100%;\\\\n    display: -webkit-box;\\\\n    display: -ms-flexbox;\\\\n    display: flex;\\\\n    -webkit-box-orient: vertical;\\\\n    -webkit-box-direction: normal;\\\\n        -ms-flex-direction: column;\\\\n            flex-direction: column;\\\\n    -webkit-box-align: center;\\\\n        -ms-flex-align: center;\\\\n            align-items: center;\\\\n    -webkit-box-pack: center;\\\\n        -ms-flex-pack: center;\\\\n            justify-content: center;\\\\n}\\\\n\\\\n/* main layout */\\\\n.ad-Container {\\\\n    height: 100%;\\\\n    width: 100%;\\\\n    display: -webkit-box;\\\\n    display: -ms-flexbox;\\\\n    display: flex;\\\\n    background: #fff;\\\\n}\\\\n    .ad-Container-main {\\\\n        height: 100%;\\\\n        -webkit-box-flex: 1;\\\\n            -ms-flex: 1;\\\\n                flex: 1;\\\\n        display: -webkit-box;\\\\n        display: -ms-flexbox;\\\\n        display: flex;\\\\n        -webkit-box-orient: vertical;\\\\n        -webkit-box-direction: normal;\\\\n            -ms-flex-direction: column;\\\\n                flex-direction: column;\\\\n    }\\\\n        .ad-Container-svg {\\\\n            height: 100%;\\\\n            -webkit-box-flex: 1;\\\\n                -ms-flex: 1;\\\\n                    flex: 1;\\\\n            display: -webkit-box;\\\\n            display: -ms-flexbox;\\\\n            display: flex;\\\\n            -webkit-box-align: center;\\\\n                -ms-flex-align: center;\\\\n                    align-items: center;\\\\n            -webkit-box-pack: center;\\\\n                -ms-flex-pack: center;\\\\n                    justify-content: center;\\\\n            background: #f3f3f3;\\\\n        }\\\\n    \\\\n    .ad-Container-controls {\\\\n        overflow: hidden;\\\\n        display: -webkit-box;\\\\n        display: -ms-flexbox;\\\\n        display: flex;\\\\n        -webkit-box-orient: vertical;\\\\n        -webkit-box-direction: normal;\\\\n            -ms-flex-direction: column;\\\\n                flex-direction: column;\\\\n        height: 100%;\\\\n        width: 320px;\\\\n        width: 20rem;\\\\n        background: #111;\\\\n    }\\\\n    .ad-Container-controls ::-webkit-scrollbar {\\\\n        width: 6px;\\\\n    }\\\\n    .ad-Container-controls ::-webkit-scrollbar-thumb {\\\\n        border-radius: 30px;\\\\n        background: rgba(255, 255, 255, .3);\\\\n    }\\\\n\\\\n.ad-Foot {\\\\n    padding: 24px 32px;\\\\n    padding: 1.5rem 2rem;\\\\n    display: -webkit-box;\\\\n    display: -ms-flexbox;\\\\n    display: flex;\\\\n    background: #fff;\\\\n    border-top: 2px solid #eee;\\\\n}\\\\n    .ad-Foot-list {\\\\n        -webkit-box-flex: 1;\\\\n            -ms-flex: 1;\\\\n                flex: 1;\\\\n    }\\\\n        .ad-Foot-item {\\\\n            text-transform: uppercase;\\\\n            font-size: 11.2px;\\\\n            font-size: .7rem;\\\\n            color: #111;\\\\n        }\\\\n        .ad-Foot-item + .ad-Foot-item {\\\\n            margin-top: 8px;\\\\n            margin-top: .5rem;\\\\n        }\\\\n            .ad-Foot-highlight {\\\\n                padding-bottom: 0.64px;\\\\n                padding-bottom: .04rem;\\\\n                border-bottom: 2px solid #00E676;\\\\n                font-weight: bold;\\\\n            }\\\\n    \\\\n    .ad-Foot-meta {\\\\n        margin-left: 32px;\\\\n        margin-left: 2rem;\\\\n        text-align: right;\\\\n        line-height: 1.4;\\\\n        font-size: 11.2px;\\\\n        font-size: .7rem;\\\\n        color: #111;\\\\n    }\\\\n        .ad-Foot-meta a {\\\\n            text-decoration: underline;\\\\n            color: #111;\\\\n        }\\\\n\\\\n\\\\n.ad-SVG {\\\\n    display: block;\\\\n    background: #fff;\\\\n    border-radius: 4px;\\\\n}\\\\n    .ad-Grid {\\\\n        fill: none;\\\\n        stroke: #eee;\\\\n        stroke-width: 1px;\\\\n    }\\\\n    .ad-Grid.is-hidden {\\\\n        opacity: 0;\\\\n    }\\\\n    .ad-Path {\\\\n        fill: none;\\\\n        stroke: #555;\\\\n        stroke-width: 4px;\\\\n        stroke-linecap: round;\\\\n    }\\\\n    .ad-Point {\\\\n        cursor: pointer;\\\\n        fill: #fff;\\\\n        stroke: #555;\\\\n        stroke-width: 5px;\\\\n        -webkit-transition: fill .2s;\\\\n        transition: fill .2s;\\\\n    }\\\\n    .ad-Point:hover,\\\\n    .ad-PointGroup.is-active .ad-Point {\\\\n        fill: #00E676;\\\\n    }\\\\n    .ad-PointGroup--first .ad-Point {\\\\n        stroke: #00E676;\\\\n    }\\\\n    .ad-Anchor {\\\\n        opacity: .5;\\\\n    }\\\\n    .ad-PointGroup.is-active .ad-Anchor {\\\\n        opacity: 1;\\\\n    }\\\\n        .ad-Anchor-point {\\\\n            cursor: pointer;\\\\n            fill: #fff;\\\\n            stroke: #888;\\\\n            stroke-width: 5px;\\\\n        }\\\\n        .ad-Anchor-line {\\\\n            stroke: #888;\\\\n            stroke-width: 1px;\\\\n            stroke-dasharray: 5 5;\\\\n        }\\\\n\\\\n/* controls on the right */\\\\n.ad-Controls {\\\\n    overflow: auto;\\\\n    -webkit-box-flex: 1;\\\\n        -ms-flex: 1;\\\\n            flex: 1;\\\\n    padding: 32px;\\\\n    padding: 2rem;\\\\n}\\\\n    .ad-Controls :first-child {\\\\n        margin-top: 0;\\\\n    }\\\\n    .ad-Controls-title {\\\\n        margin: 48px 0 24px;\\\\n        margin: 3rem 0 1.5rem;\\\\n        font-size: 12.8px;\\\\n        font-size: .8rem;\\\\n        font-weight: bold;\\\\n        color: #fff;\\\\n    }\\\\n        .ad-Controls-container {\\\\n            display: -webkit-box;\\\\n            display: -ms-flexbox;\\\\n            display: flex;\\\\n        }\\\\n        .ad-Controls-container + .ad-Controls-container {\\\\n            margin-top: 24px;\\\\n            margin-top: 1.5rem;\\\\n        }\\\\n\\\\n.ad-Control {\\\\n    -webkit-box-flex: 1;\\\\n        -ms-flex: 1;\\\\n            flex: 1;\\\\n}\\\\n    .ad-Control-label {\\\\n        display: block;\\\\n        margin-bottom: 8px;\\\\n        margin-bottom: .5rem;\\\\n        text-transform: uppercase;\\\\n        font-size: 9.6px;\\\\n        font-size: .6rem;\\\\n        font-weight: bold;\\\\n        color: rgb(209, 209, 209);\\\\n    }\\\\n\\\\n.ad-Result {\\\\n    height: 80px;\\\\n    height: 5rem;\\\\n    padding: 22.4px 25.6px;\\\\n    padding: 1.4rem 1.6rem;\\\\n    background: #111;\\\\n    -webkit-box-shadow: 0 -5px 10px rgba(0, 0, 0, .4);\\\\n            box-shadow: 0 -5px 10px rgba(0, 0, 0, .4);\\\\n}\\\\n    .ad-Result-textarea {\\\\n        height: 100%;\\\\n        width: 100%;\\\\n        resize: none;\\\\n        border: none;\\\\n        background: none;\\\\n        text-transform: uppercase;\\\\n        font-family: \\\\\\\"Open Sans\\\\\\\", sans-serif;\\\\n        font-size: 11.2px;\\\\n        font-size: .7rem;\\\\n        font-weight: bold;\\\\n        line-height: 1.8;\\\\n        color: #fff;\\\\n    }\\\\n    .ad-Result-textarea:focus {\\\\n        outline: 0;\\\\n    }\\\\n\\\\n/* control elements */\\\\n.ad-Button {\\\\n    padding: 12.8px 22.4px;\\\\n    padding: .8rem 1.4rem;\\\\n    background: #00E676;\\\\n    border: none;\\\\n    border-radius: 50px;\\\\n    cursor: pointer;\\\\n    -webkit-transition: background .2s;\\\\n    transition: background .2s;\\\\n    text-transform: uppercase;\\\\n    font-family: \\\\\\\"Open Sans\\\\\\\", sans-serif;\\\\n    font-weight: bold;\\\\n    font-size: 9.6px;\\\\n    font-size: .6rem;\\\\n    letter-spacing: 1.28px;\\\\n    letter-spacing: .08rem;\\\\n    color: #fff;\\\\n}\\\\n.ad-Button:focus,\\\\n.ad-Button:hover {\\\\n    outline: 0;\\\\n    background: rgb(0, 255, 132);\\\\n}\\\\n.ad-Button--delete {\\\\n    background: #E53935;\\\\n}\\\\n.ad-Button--delete:focus,\\\\n.ad-Button--delete:hover {\\\\n    background: rgb(232, 77, 74);\\\\n}\\\\n.ad-Button--reset {\\\\n    background: rgb(43, 43, 43);\\\\n}\\\\n.ad-Button--reset:focus,\\\\n.ad-Button--reset:hover {\\\\n    background: rgb(56, 56, 56);\\\\n}\\\\n.ad-Path {\\\\n    height: 18px;\\\\n    width: 132px;\\\\n    width: 2rem;\\\\n    background: rgb(43, 43, 43);\\\\n    border: none;\\\\n    border-radius: 4px;\\\\n    text-align: center;\\\\n    font-family: \\\\\\\"Open Sans\\\\\\\", sans-serif;\\\\n    font-size: 9.6px;\\\\n    font-size: .6rem;\\\\n    color: #fff;\\\\n}\\\\n.ad-Text {\\\\n    height: 18px;\\\\n    width: 32px;\\\\n    width: 2rem;\\\\n    background: rgb(43, 43, 43);\\\\n    border: none;\\\\n    border-radius: 4px;\\\\n    text-align: center;\\\\n    font-family: \\\\\\\"Open Sans\\\\\\\", sans-serif;\\\\n    font-size: 9.6px;\\\\n    font-size: .6rem;\\\\n    color: #fff;\\\\n}\\\\n.ad-Text:focus {\\\\n    outline: 0;\\\\n    background: rgb(69, 69, 69);\\\\n}\\\\n\\\\n.ad-Checkbox-input {\\\\n    display: none;\\\\n}\\\\n.ad-Checkbox-fake {\\\\n    position: relative;\\\\n    height: 14px;\\\\n    width: 32px;\\\\n    width: 2rem;\\\\n    background: rgb(43, 43, 43);\\\\n    border-radius: 30px;\\\\n}\\\\n.ad-Checkbox-fake::after {\\\\n    content: \\\\\\\"\\\\\\\";\\\\n    -webkit-box-sizing: border-box;\\\\n            box-sizing: border-box;\\\\n    display: block;\\\\n    position: absolute;\\\\n    top: -2px;\\\\n    left: 0;\\\\n    height: 18px;\\\\n    width: 18px;\\\\n    cursor: pointer;\\\\n    border: 4px solid #fff;\\\\n    background: rgb(43, 43, 43);\\\\n    border-radius: 50%;\\\\n}\\\\n.ad-Checkbox-input:checked + .ad-Checkbox-fake::after {\\\\n    left: auto;\\\\n    right: 0;\\\\n    border-color: #00E676;\\\\n}\\\\n\\\\n.ad-Choices {\\\\n    display: -webkit-box;\\\\n    display: -ms-flexbox;\\\\n    display: flex;\\\\n    width: 192px;\\\\n    width: 12rem;\\\\n}\\\\n    .ad-Choice {\\\\n        -webkit-box-flex: 1;\\\\n            -ms-flex: 1;\\\\n                flex: 1;\\\\n    }\\\\n        .ad-Choice-input {\\\\n            display: none;\\\\n        }\\\\n        .ad-Choice-fake {\\\\n            padding: 9.6px;\\\\n            padding: .6rem;\\\\n            background: rgb(43, 43, 43);\\\\n            border: 4px solid transparent;\\\\n            -webkit-transition: border .2s;\\\\n            transition: border .2s;\\\\n            cursor: pointer;\\\\n            text-align: center;\\\\n            text-transform: uppercase;\\\\n            font-family: \\\\\\\"Open Sans\\\\\\\", sans-serif;\\\\n            font-size: 12.8px;\\\\n            font-size: .8rem;\\\\n            font-weight: bold;\\\\n            color: #fff;\\\\n        }\\\\n        .ad-Choice:first-child .ad-Choice-fake {\\\\n            border-radius: 4px 0 0 4px;\\\\n        }\\\\n        .ad-Choice:last-child .ad-Choice-fake {\\\\n            border-radius: 0 4px 4px 0;\\\\n        }\\\\n        .ad-Choice-input:checked + .ad-Choice-fake {\\\\n            border-color: #00E676;\\\\n        }\\\\n\\\\n.ad-Range {\\\\n    display: -webkit-box;\\\\n    display: -ms-flexbox;\\\\n    display: flex;\\\\n    -webkit-box-align: center;\\\\n        -ms-flex-align: center;\\\\n            align-items: center;\\\\n}\\\\n    .ad-Range-text {\\\\n        margin-left: 8px;\\\\n        margin-left: .5rem;\\\\n    }\\\\n    .ad-Range-input {\\\\n        width: 100%;\\\\n        height: 14px;\\\\n        -webkit-appearance: none;\\\\n           -moz-appearance: none;\\\\n                appearance: none;\\\\n        border-radius: 30px;\\\\n        background: rgb(43, 43, 43);\\\\n    }\\\\n    .ad-Range-input:focus {\\\\n        outline: 0;\\\\n        background: rgb(69, 69, 69);\\\\n    }\\\\n    /* thumb */\\\\n    .ad-Range-input::-webkit-slider-thumb {\\\\n        -webkit-appearance: none;\\\\n        width: 18px;\\\\n        height: 18px;\\\\n        border: 4px solid #fff;\\\\n        background: rgb(43, 43, 43);\\\\n        border-radius: 50%;\\\\n        cursor: pointer;\\\\n        -webkit-transition: border .2s;\\\\n        transition: border .2s;\\\\n    }\\\\n    .ad-Range-input::-moz-range-thumb {\\\\n        -webkit-appearance: none;\\\\n        width: 18px;\\\\n        height: 18px;\\\\n        border: 4px solid #fff;\\\\n        background: rgb(43, 43, 43);\\\\n        border-radius: 50%;\\\\n        cursor: pointer;\\\\n        -webkit-transition: border .2s;\\\\n        transition: border .2s;\\\\n    }\\\\n\\\\n    .ad-Range-input:hover::-webkit-slider-thumb,\\\\n    .ad-Range-input:focus::-webkit-slider-thumb {\\\\n        border-color: #00E676;\\\\n    }\\\\n    .ad-Range-input:hover::-moz-range-thumb,\\\\n    .ad-Range-input:focus::-moz-range-thumb {\\\\n        border-color: #00E676;\\\\n    }\\\\n</style>\\\\n<body>\\\\n\\\\n<div\\\\n     id=\\\\\\\"app\\\\\\\"\\\\n     class=\\\\\\\"ad-App\\\\\\\">\\\\n</div>\\\\n\\\\n</body>\\\\n<script crossorigin src=\\\\\\\"https://unpkg.com/react@16/umd/react.production.min.js\\\\\\\"></script>\\\\n<script crossorigin src=\\\\\\\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\\\\\\\"></script>\\\\n\\\\n<script>\\\\nfunction _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}const Component = React.Component;\\\\nconst render = ReactDOM.render;\\\\n\\\\nclass Container extends Component {constructor(...args) {super(...args);_defineProperty(this, \\\\\\\"state\\\\\\\",\\\\n{\\\\n      w: 400,\\\\n      h: 300,\\\\n      grid: {\\\\n        show: true,\\\\n        snap: true,\\\\n        size: 50 },\\\\n\\\\n      ctrl: false,\\\\n      points: [\\\\n      { x: 350, y: 200 },\\\\n      { x: 50, y: 125, c: [{ x: 73, y: 44 }, { x: 300, y: 260 }] }],\\\\n\\\\n      activePoint: 1,\\\\n      draggedPoint: false,\\\\n      draggedQuadratic: false,\\\\n      draggedCubic: false,\\\\n      closePath: false });_defineProperty(this, \\\\\\\"setWidth\\\\\\\",\\\\n\\\\n    e => {\\\\n      let v = this.positiveNumber(e.target.value),min = 1;\\\\n      if (v < min) v = min;\\\\n\\\\n      this.setState({ w: v });\\\\n    });_defineProperty(this, \\\\\\\"setHeight\\\\\\\",\\\\n\\\\n    e => {\\\\n      let v = this.positiveNumber(e.target.value),min = 1;\\\\n      if (v < min) v = min;\\\\n\\\\n      this.setState({ h: v });\\\\n\\\\n\\\\n\\\\n    })\\\\n    \\\\n    \\\\n_defineProperty(this, \\\\\\\"_setPathInput\\\\\\\",e => {\\\\nconst p = JSON.parse(e.target.value);\\\\nthis.setState({ points: p });\\\\n});\\\\n\\\\n    _defineProperty(this, \\\\\\\"_setStartPositionX\\\\\\\",e => {\\\\nconst x = +e.target.value;\\\\nthis.setState({ offsetX: x || 0});\\\\n});\\\\n\\\\n_defineProperty(this, \\\\\\\"_setStartPositionY\\\\\\\",e => {\\\\n  const y = +e.target.value;\\\\nthis.setState({ offsetY:+y || 0});\\\\n\\\\n});\\\\n    \\\\n    ;_defineProperty(this, \\\\\\\"setGridSize\\\\\\\",\\\\n\\\\n    e => {\\\\n      let grid = this.state.grid;\\\\n      let v = this.positiveNumber(e.target.value);\\\\n      let min = 1;\\\\n      let max = Math.min(this.state.w, this.state.h);\\\\n\\\\n      if (v < min) v = min;\\\\n      if (v >= max) v = max / 2;\\\\n\\\\n      grid.size = v;\\\\n\\\\n      this.setState({ grid });\\\\n    });_defineProperty(this, \\\\\\\"setGridSnap\\\\\\\",\\\\n    e => {\\\\n      let grid = this.state.grid;\\\\n      grid.snap = e.target.checked;\\\\n\\\\n      this.setState({ grid });\\\\n    });\\\\n\\\\n    _defineProperty(this, \\\\\\\"setGridShow\\\\\\\",\\\\n    e => {\\\\n      let grid = this.state.grid;\\\\n      grid.show = e.target.checked;\\\\n      this.setState({ grid });\\\\n\\\\n      const parent = {x:this.state.offsetX || 0,y:this.state.offsetY || 0}\\\\n      const points = this.refs.svg.props.points;\\\\n\\\\n      const offset = {x:points[0].x*-1 + parent.x ,y:points[0].y*-1+ parent.y};\\\\n      if(!grid.show &&  !this.refs.svg._fistPoint){\\\\n        this.refs.svg._firstPoint = {...offset};\\\\n        // delete this.refs.svg._lastPoint;\\\\n        // this.setState({ offsetX:0,offsetY:0});\\\\n    // if(typeof window.parent != \\\\\\\"undefined\\\\\\\")\\\\n       window.parent.document.getElementById('result').value = JSON.stringify(this.refs.svg.props.points)\\\\n     \\\\n     \\\\n      }else{\\\\n        offset.x = this.refs.svg._firstPoint.x*-1;\\\\n        offset.y = this.refs.svg._firstPoint.y*-1;\\\\n        delete this.refs.svg._firstPoint;\\\\n        // const len = Object.keys(points).length;\\\\n     //  if(!this.refs.svg._lastPoint) this.refs.svg._lastPoint = {x:points[len-1].x,y:points[len-1].y};\\\\n      }\\\\n      const curve = this.refs.svg.props.points;\\\\n      for(const point of curve){\\\\n        point.x+=offset.x;\\\\n        point.y+=offset.y;\\\\n        if(point.c){\\\\n          for(const cont of point.c){\\\\n            cont.x+=offset.x;\\\\n            cont.y+=offset.y;\\\\n          }  \\\\n        }\\\\n      }  \\\\n      // console.log(this.refs.svg._lastPoint)\\\\n// console.log([this.refs.svg._firstPoint,'first'] ,[this.refs.svg._lastPoint,'last'])\\\\n\\\\n    });_defineProperty(this, \\\\\\\"setClosePath\\\\\\\",\\\\n\\\\n    e => {\\\\n      this.setState({ closePath: e.target.checked });\\\\n\\\\n    });_defineProperty(this, \\\\\\\"getMouseCoords\\\\\\\",\\\\n\\\\n    e => {\\\\n      const rect = ReactDOM.findDOMNode(this.refs.svg).getBoundingClientRect();\\\\n      let x = Math.round(e.pageX - rect.left);\\\\n      let y = Math.round(e.pageY - rect.top);\\\\n\\\\n      if (this.state.grid.snap) {\\\\n        x = this.state.grid.size * Math.round(x / this.state.grid.size);\\\\n        y = this.state.grid.size * Math.round(y / this.state.grid.size);\\\\n      }\\\\n\\\\n      return { x, y };\\\\n    });_defineProperty(this, \\\\\\\"setPointType\\\\\\\",\\\\n\\\\n    e => {\\\\n      const points = this.state.points;\\\\n      const active = this.state.activePoint;\\\\n\\\\n      // not the first point\\\\n      if (active !== 0) {\\\\n        let v = e.target.value;\\\\n\\\\n        switch (v) {\\\\n          case \\\\\\\"l\\\\\\\":\\\\n            points[active] = {\\\\n              x: points[active].x,\\\\n              y: points[active].y };\\\\n\\\\n            break;\\\\n          // case \\\\\\\"q\\\\\\\":\\\\n          //   points[active] = {\\\\n          //     x: points[active].x,\\\\n          //     y: points[active].y,\\\\n          //     q: {\\\\n          //       x: (points[active].x + points[active - 1].x) / 2,\\\\n          //       y: (points[active].y + points[active - 1].y) / 2 } };\\\\n\\\\n\\\\n          //   break;\\\\n          case \\\\\\\"c\\\\\\\":\\\\n            points[active] = {\\\\n              x: points[active].x,\\\\n              y: points[active].y,\\\\n              c: [\\\\n              {\\\\n                x: (points[active].x + points[active - 1].x - 50) / 2,\\\\n                y: (points[active].y + points[active - 1].y) / 2 },\\\\n\\\\n              {\\\\n                x: (points[active].x + points[active - 1].x + 50) / 2,\\\\n                y: (points[active].y + points[active - 1].y) / 2 }] };\\\\n\\\\n\\\\n\\\\n            break;\\\\n          // case \\\\\\\"a\\\\\\\":\\\\n          //   points[active] = {\\\\n          //     x: points[active].x,\\\\n          //     y: points[active].y,\\\\n          //     a: {\\\\n          //       rx: 50,\\\\n          //       ry: 50,\\\\n          //       rot: 0,\\\\n          //       laf: 1,\\\\n          //       sf: 1 } };\\\\n\\\\n\\\\n          //   break;\\\\n          }\\\\n\\\\n\\\\n        this.setState({ points });\\\\n      }\\\\n    });_defineProperty(this, \\\\\\\"setPointPosition\\\\\\\",\\\\n\\\\n    (coord, e) => {\\\\n      let coords = this.state.points[this.state.activePoint];\\\\n      let v = this.positiveNumber(e.target.value);\\\\n\\\\n      if (coord === \\\\\\\"x\\\\\\\" && v > this.state.w) v = this.state.w;\\\\n      if (coord === \\\\\\\"y\\\\\\\" && v > this.state.h) v = this.state.h;\\\\n\\\\n      coords[coord] = v;\\\\n\\\\n      this.setPointCoords(coords);\\\\n    });_defineProperty(this, \\\\\\\"setQuadraticPosition\\\\\\\",\\\\n\\\\n    (coord, e) => {\\\\n      let coords = this.state.points[this.state.activePoint].q;\\\\n      let v = this.positiveNumber(e.target.value);\\\\n\\\\n      if (coord === \\\\\\\"x\\\\\\\" && v > this.state.w) v = this.state.w;\\\\n      if (coord === \\\\\\\"y\\\\\\\" && v > this.state.h) v = this.state.h;\\\\n\\\\n      coords[coord] = v;\\\\n\\\\n      this.setQuadraticCoords(coords);\\\\n    });_defineProperty(this, \\\\\\\"setCubicPosition\\\\\\\",\\\\n\\\\n    (coord, anchor, e) => {\\\\n      let coords = this.state.points[this.state.activePoint].c[anchor];\\\\n      let v = this.positiveNumber(e.target.value);\\\\n\\\\n      if (coord === \\\\\\\"x\\\\\\\" && v > this.state.w) v = this.state.w;\\\\n      if (coord === \\\\\\\"y\\\\\\\" && v > this.state.h) v = this.state.h;\\\\n\\\\n      coords[coord] = v;\\\\n\\\\n      this.setCubicCoords(coords, anchor);\\\\n    });_defineProperty(this, \\\\\\\"setPointCoords\\\\\\\",\\\\n\\\\n    coords => {\\\\n      const points = this.state.points;\\\\n      const active = this.state.activePoint;\\\\n\\\\n      points[active].x = coords.x;\\\\n      points[active].y = coords.y;\\\\n\\\\n      this.setState({ points });\\\\n    });_defineProperty(this, \\\\\\\"setQuadraticCoords\\\\\\\",\\\\n\\\\n    coords => {\\\\n      const points = this.state.points;\\\\n      const active = this.state.activePoint;\\\\n\\\\n      points[active].q.x = coords.x;\\\\n      points[active].q.y = coords.y;\\\\n\\\\n      this.setState({ points });\\\\n    });_defineProperty(this, \\\\\\\"setArcParam\\\\\\\",\\\\n\\\\n    (param, e) => {\\\\n      const points = this.state.points;\\\\n      const active = this.state.activePoint;\\\\n      let v;\\\\n\\\\n      if ([\\\\\\\"laf\\\\\\\", \\\\\\\"sf\\\\\\\"].indexOf(param) > -1) {\\\\n        v = e.target.checked ? 1 : 0;\\\\n      } else {\\\\n        v = this.positiveNumber(e.target.value);\\\\n      }\\\\n\\\\n      points[active].a[param] = v;\\\\n\\\\n      this.setState({ points });\\\\n    });_defineProperty(this, \\\\\\\"setCubicCoords\\\\\\\",\\\\n\\\\n    (coords, anchor) => {\\\\n      const points = this.state.points;\\\\n      const active = this.state.activePoint;\\\\n\\\\n      points[active].c[anchor].x = coords.x;\\\\n      points[active].c[anchor].y = coords.y;\\\\n\\\\n      this.setState({ points });\\\\n    });_defineProperty(this, \\\\\\\"setDraggedPoint\\\\\\\",\\\\n\\\\n    index => {\\\\n      if (!this.state.ctrl) {\\\\n        this.setState({\\\\n          activePoint: index,\\\\n          draggedPoint: true });\\\\n\\\\n      }\\\\n    });_defineProperty(this, \\\\\\\"setDraggedQuadratic\\\\\\\",\\\\n\\\\n    index => {\\\\n      if (!this.state.ctrl) {\\\\n        this.setState({\\\\n          activePoint: index,\\\\n          draggedQuadratic: true });\\\\n\\\\n      }\\\\n    });_defineProperty(this, \\\\\\\"setDraggedCubic\\\\\\\",\\\\n\\\\n    (index, anchor) => {\\\\n      if (!this.state.ctrl) {\\\\n        this.setState({\\\\n          activePoint: index,\\\\n          draggedCubic: anchor });\\\\n      }\\\\n    });_defineProperty(this, \\\\\\\"cancelDragging\\\\\\\",\\\\n\\\\n    e => {\\\\n      this.setState({\\\\n        draggedPoint: false,\\\\n        draggedQuadratic: false,\\\\n        draggedCubic: false });\\\\n\\\\n    });_defineProperty(this, \\\\\\\"addPoint\\\\\\\",\\\\n\\\\n    e => {\\\\n      if (this.state.ctrl) {\\\\n        let coords = this.getMouseCoords(e);\\\\n        let points = this.state.points;\\\\n\\\\n        points.push(coords);\\\\n\\\\n        this.setState({\\\\n          points,\\\\n          activePoint: points.length - 1 });\\\\n\\\\n      }\\\\n    });_defineProperty(this, \\\\\\\"removeActivePoint\\\\\\\",\\\\n\\\\n    e => {\\\\n      let points = this.state.points;\\\\n      let active = this.state.activePoint;\\\\n\\\\n      if (points.length > 1 && active !== 0) {\\\\n        points.splice(active, 1);\\\\n\\\\n        this.setState({\\\\n          points,\\\\n          activePoint: points.length - 1 });\\\\n\\\\n      }\\\\n    });_defineProperty(this, \\\\\\\"handleMouseMove\\\\\\\",\\\\n\\\\n    e => {\\\\n      if (!this.state.ctrl) {\\\\n        if (this.state.draggedPoint) {\\\\n          this.setPointCoords(this.getMouseCoords(e));\\\\n        } else if (this.state.draggedQuadratic) {\\\\n          this.setQuadraticCoords(this.getMouseCoords(e));\\\\n        } else if (this.state.draggedCubic !== false) {\\\\n          this.setCubicCoords(this.getMouseCoords(e), this.state.draggedCubic);\\\\n        }\\\\n      }\\\\n    });_defineProperty(this, \\\\\\\"handleKeyDown\\\\\\\",\\\\n\\\\n    e => {\\\\n      if (e.ctrlKey) this.setState({ ctrl: true });\\\\n    });_defineProperty(this, \\\\\\\"handleKeyUp\\\\\\\",\\\\n\\\\n    e => {\\\\n      if (!e.ctrlKey) this.setState({ ctrl: false });\\\\n    });_defineProperty(this, \\\\\\\"reset\\\\\\\",\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n    e => {\\\\n      let w = this.state.w,h = this.state.h;\\\\n\\\\n      this.setState({\\\\n        points: [{ x: w / 2, y: h / 2 }],\\\\n        activePoint: 0 });\\\\n\\\\n    });}componentWillMount() {document.addEventListener(\\\\\\\"keydown\\\\\\\", this.handleKeyDown, false);document.addEventListener(\\\\\\\"keyup\\\\\\\", this.handleKeyUp, false);}componentWillUnmount() {document.removeEventListener(\\\\\\\"keydown\\\\\\\");document.removeEventListener(\\\\\\\"keyup\\\\\\\");}positiveNumber(n) {n = parseInt(n);if (isNaN(n) || n < 0) n = 0;return n;}generatePath() {let { points, closePath } = this.state;let d = \\\\\\\"\\\\\\\";points.forEach((p, i) => {if (i === 0) {// first point\\\\n        d += \\\\\\\"M\\\\\\\";} else if (p.q) {// quadratic\\\\n        d += `Q${p.q.x},${p.q.y},`;} else if (p.c) {// cubic\\\\n        d += `C${p.c[0].x},${p.c[0].y},${p.c[1].x},${p.c[1].y},`;} else if (p.a) {// arc\\\\n        d += `A${p.a.rx},${p.a.ry},${p.a.rot},${p.a.laf},${p.a.sf},`;} else {d += \\\\\\\"L\\\\\\\";}d += `${p.x},${p.y}`;});if (closePath) d += \\\\\\\"Z\\\\\\\";return d;}render() {return React.createElement(\\\\\\\"div\\\\\\\", {\\\\n      className: \\\\\\\"ad-Container\\\\\\\",\\\\n      onMouseUp: this.cancelDragging },\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Container-main\\\\\\\" },\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Container-svg\\\\\\\" },\\\\n    React.createElement(SVG, _extends({\\\\n      ref: \\\\\\\"svg\\\\\\\",\\\\n      path: this.generatePath() },\\\\n    this.state, {\\\\n      addPoint: this.addPoint,\\\\n      setDraggedPoint: this.setDraggedPoint,\\\\n      setDraggedQuadratic: this.setDraggedQuadratic,\\\\n      setDraggedCubic: this.setDraggedCubic,\\\\n      handleMouseMove: this.handleMouseMove }))),\\\\n\\\\n    React.createElement(Foot, null)),\\\\n\\\\n\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Container-controls\\\\\\\" },\\\\n    React.createElement(Controls, _extends({},\\\\n    this.state, {\\\\n      reset: this.reset,\\\\n      removeActivePoint: this.removeActivePoint,\\\\n      setPointPosition: this.setPointPosition,\\\\n      setQuadraticPosition: this.setQuadraticPosition,\\\\n      setCubicPosition: this.setCubicPosition,\\\\n      setArcParam: this.setArcParam,\\\\n      setPointType: this.setPointType,\\\\n      setWidth: this.setWidth,\\\\n      setHeight: this.setHeight,\\\\n      _setStartPositionX: this._setStartPositionX,\\\\n      _setStartPositionY: this._setStartPositionY,\\\\n      _setPathInput:this._setPathInput,\\\\n      setGridSize: this.setGridSize,\\\\n      setGridSnap: this.setGridSnap,\\\\n      setGridShow: this.setGridShow,\\\\n      setClosePath: this.setClosePath })),\\\\n    React.createElement(Result, { path: this.generatePath() })));\\\\n\\\\n\\\\n\\\\n  }}\\\\n\\\\n\\\\nfunction Foot(props) {\\\\n  return (\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Foot\\\\\\\" },\\\\n    React.createElement(\\\\\\\"ul\\\\\\\", { className: \\\\\\\"ad-Foot-list\\\\\\\" },\\\\n    React.createElement(\\\\\\\"li\\\\\\\", { className: \\\\\\\"ad-Foot-item\\\\\\\" },\\\\n    React.createElement(\\\\\\\"span\\\\\\\", { className: \\\\\\\"ad-Foot-highlight\\\\\\\" }, \\\\\\\"Click\\\\\\\"), \\\\\\\" to select a point\\\\\\\"),\\\\n\\\\n    React.createElement(\\\\\\\"li\\\\\\\", { className: \\\\\\\"ad-Foot-item\\\\\\\" },\\\\n    React.createElement(\\\\\\\"span\\\\\\\", { className: \\\\\\\"ad-Foot-highlight\\\\\\\" }, \\\\\\\"Ctrl + Click\\\\\\\"), \\\\\\\" to add a point\\\\\\\")),\\\\n\\\\n\\\\n    \\\\n    ));\\\\n\\\\n\\\\n\\\\n}\\\\n\\\\nfunction Result(props) {\\\\n        \\\\n\\\\n  return (\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Result\\\\\\\" },\\\\n    React.createElement(\\\\\\\"textarea\\\\\\\", {\\\\n      className: \\\\\\\"ad-Result-textarea\\\\\\\",\\\\n      value: props.path,\\\\n      onFocus: e => e.target.select() })));\\\\n\\\\n\\\\n}\\\\n\\\\n/**\\\\n   * SVG rendering\\\\n   */\\\\n\\\\nclass SVG extends Component {\\\\n  render() {\\\\n    const {\\\\n      path,\\\\n      w,\\\\n      h,\\\\n      grid,\\\\n      points,\\\\n      activePoint,\\\\n      addPoint,\\\\n      handleMouseMove,\\\\n      setDraggedPoint,\\\\n      setDraggedQuadratic,\\\\n      setDraggedCubic } =\\\\n    this.props;\\\\n\\\\n    let circles = points.map((p, i, a) => {\\\\n      let anchors = [];\\\\n\\\\n      if (p.q) {\\\\n        anchors.push(\\\\n        React.createElement(Quadratic, {\\\\n          index: i,\\\\n          p1x: a[i - 1].x,\\\\n          p1y: a[i - 1].y,\\\\n          p2x: p.x,\\\\n          p2y: p.y,\\\\n          x: p.q.x,\\\\n          y: p.q.y,\\\\n          setDraggedQuadratic: setDraggedQuadratic }));\\\\n\\\\n      } else if (p.c) {\\\\n        anchors.push(\\\\n        React.createElement(Cubic, {\\\\n          index: i,\\\\n          p1x: a[i - 1].x,\\\\n          p1y: a[i - 1].y,\\\\n          p2x: p.x,\\\\n          p2y: p.y,\\\\n          x1: p.c[0].x,\\\\n          y1: p.c[0].y,\\\\n          x2: p.c[1].x,\\\\n          y2: p.c[1].y,\\\\n          setDraggedCubic: setDraggedCubic }));\\\\n\\\\n      }\\\\n\\\\n      return (\\\\n        React.createElement(\\\\\\\"g\\\\\\\", { className:\\\\n          \\\\\\\"ad-PointGroup\\\\\\\" + (\\\\n          i === 0 ? \\\\\\\"  ad-PointGroup--first\\\\\\\" : \\\\\\\"\\\\\\\") + (\\\\n          activePoint === i ? \\\\\\\"  is-active\\\\\\\" : \\\\\\\"\\\\\\\") },\\\\n\\\\n        React.createElement(Point, {\\\\n          index: i,\\\\n          x: p.x,\\\\n          y: p.y,\\\\n          setDraggedPoint: setDraggedPoint }),\\\\n        anchors));\\\\n\\\\n\\\\n    });\\\\n\\\\n    return (\\\\n      React.createElement(\\\\\\\"svg\\\\\\\", {\\\\n        className: \\\\\\\"ad-SVG\\\\\\\",\\\\n        width: w,\\\\n        height: h,\\\\n        onClick: e => addPoint(e),\\\\n        onMouseMove: e => handleMouseMove(e) },\\\\n      React.createElement(Grid, {\\\\n        w: w,\\\\n        h: h,\\\\n        grid: grid }),\\\\n      React.createElement(\\\\\\\"path\\\\\\\", {\\\\n        className: \\\\\\\"ad-Path\\\\\\\",\\\\n        d: path }),\\\\n      React.createElement(\\\\\\\"g\\\\\\\", { className: \\\\\\\"ad-Points\\\\\\\" },\\\\n      circles)));\\\\n\\\\n\\\\n\\\\n  }}\\\\n\\\\n\\\\nfunction Cubic(props) {\\\\n  return (\\\\n    React.createElement(\\\\\\\"g\\\\\\\", { className: \\\\\\\"ad-Anchor\\\\\\\" },\\\\n    React.createElement(\\\\\\\"line\\\\\\\", {\\\\n      className: \\\\\\\"ad-Anchor-line\\\\\\\",\\\\n      x1: props.p1x,\\\\n      y1: props.p1y,\\\\n      x2: props.x1,\\\\n      y2: props.y1 }),\\\\n    React.createElement(\\\\\\\"line\\\\\\\", {\\\\n      className: \\\\\\\"ad-Anchor-line\\\\\\\",\\\\n      x1: props.p2x,\\\\n      y1: props.p2y,\\\\n      x2: props.x2,\\\\n      y2: props.y2 }),\\\\n    React.createElement(\\\\\\\"circle\\\\\\\", {\\\\n      className: \\\\\\\"ad-Anchor-point\\\\\\\",\\\\n      onMouseDown: e => props.setDraggedCubic(props.index, 0),\\\\n      cx: props.x1,\\\\n      cy: props.y1,\\\\n      r: 6 }),\\\\n    React.createElement(\\\\\\\"circle\\\\\\\", {\\\\n      className: \\\\\\\"ad-Anchor-point\\\\\\\",\\\\n      onMouseDown: e => props.setDraggedCubic(props.index, 1),\\\\n      cx: props.x2,\\\\n      cy: props.y2,\\\\n      r: 6 })));\\\\n\\\\n\\\\n}\\\\n\\\\nfunction Quadratic(props) {\\\\n  return (\\\\n    React.createElement(\\\\\\\"g\\\\\\\", { className: \\\\\\\"ad-Anchor\\\\\\\" },\\\\n    React.createElement(\\\\\\\"line\\\\\\\", {\\\\n      className: \\\\\\\"ad-Anchor-line\\\\\\\",\\\\n      x1: props.p1x,\\\\n      y1: props.p1y,\\\\n      x2: props.x,\\\\n      y2: props.y }),\\\\n    React.createElement(\\\\\\\"line\\\\\\\", {\\\\n      className: \\\\\\\"ad-Anchor-line\\\\\\\",\\\\n      x1: props.x,\\\\n      y1: props.y,\\\\n      x2: props.p2x,\\\\n      y2: props.p2y }),\\\\n    React.createElement(\\\\\\\"circle\\\\\\\", {\\\\n      className: \\\\\\\"ad-Anchor-point\\\\\\\",\\\\n      onMouseDown: e => props.setDraggedQuadratic(props.index),\\\\n      cx: props.x,\\\\n      cy: props.y,\\\\n      r: 6 })));\\\\n\\\\n\\\\n}\\\\n\\\\nfunction Point(props) {\\\\n  return (\\\\n    React.createElement(\\\\\\\"circle\\\\\\\", {\\\\n      className: \\\\\\\"ad-Point\\\\\\\",\\\\n      onMouseDown: e => props.setDraggedPoint(props.index),\\\\n      cx: props.x,\\\\n      cy: props.y,\\\\n      r: 8 }));\\\\n\\\\n}\\\\n\\\\nfunction Grid(props) {\\\\n  const { show, snap, size } = props.grid;\\\\n\\\\n  let grid = [];\\\\n\\\\n  for (let i = 1; i < props.w / size; i++) {\\\\n    grid.push(\\\\n    React.createElement(\\\\\\\"line\\\\\\\", {\\\\n      x1: i * size,\\\\n      y1: 0,\\\\n      x2: i * size,\\\\n      y2: props.h }));\\\\n\\\\n  }\\\\n\\\\n  for (let i = 1; i < props.h / size; i++) {\\\\n    grid.push(\\\\n    React.createElement(\\\\\\\"line\\\\\\\", {\\\\n      x1: 0,\\\\n      y1: i * size,\\\\n      x2: props.w,\\\\n      y2: i * size }));\\\\n\\\\n  }\\\\n\\\\n  return (\\\\n    React.createElement(\\\\\\\"g\\\\\\\", { className:\\\\n      \\\\\\\"ad-Grid\\\\\\\" + (\\\\n      !show ? \\\\\\\"  is-hidden\\\\\\\" : \\\\\\\"\\\\\\\") },\\\\n\\\\n    grid));\\\\n\\\\n\\\\n}\\\\n\\\\n/**\\\\n   * Controls\\\\n   */\\\\n\\\\nfunction Controls(props) {\\\\n  const active = props.points[props.activePoint];\\\\n  const step = props.grid.snap ? props.grid.size : 1;\\\\n\\\\n  let params = [];\\\\n\\\\n  if (active.q) {\\\\n    params.push(\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Control point X position\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.w,\\\\n      step: step,\\\\n      value: active.q.x,\\\\n      onChange: e => props.setQuadraticPosition(\\\\\\\"x\\\\\\\", e) })));\\\\n\\\\n\\\\n    params.push(\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Control point Y position\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.h,\\\\n      step: step,\\\\n      value: active.q.y,\\\\n      onChange: e => props.setQuadraticPosition(\\\\\\\"y\\\\\\\", e) })));\\\\n\\\\n\\\\n  } else if (active.c) {\\\\n    params.push(\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"First control point X position\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.w,\\\\n      step: step,\\\\n      value: active.c[0].x,\\\\n      onChange: e => props.setCubicPosition(\\\\\\\"x\\\\\\\", 0, e) })));\\\\n\\\\n\\\\n    params.push(\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"First control point Y position\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.h,\\\\n      step: step,\\\\n      value: active.c[0].y,\\\\n      onChange: e => props.setCubicPosition(\\\\\\\"y\\\\\\\", 0, e) })));\\\\n\\\\n\\\\n    params.push(\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Second control point X position\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.w,\\\\n      step: step,\\\\n      value: active.c[1].x,\\\\n      onChange: e => props.setCubicPosition(\\\\\\\"x\\\\\\\", 1, e) })));\\\\n\\\\n\\\\n    params.push(\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Second control point Y position\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.h,\\\\n      step: step,\\\\n      value: active.c[1].y,\\\\n      onChange: e => props.setCubicPosition(\\\\\\\"y\\\\\\\", 1, e) })));\\\\n\\\\n\\\\n  } else if (active.a) {\\\\n    params.push(\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"X Radius\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.w,\\\\n      step: step,\\\\n      value: active.a.rx,\\\\n      onChange: e => props.setArcParam(\\\\\\\"rx\\\\\\\", e) })));\\\\n\\\\n\\\\n    params.push(\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Y Radius\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.h,\\\\n      step: step,\\\\n      value: active.a.ry,\\\\n      onChange: e => props.setArcParam(\\\\\\\"ry\\\\\\\", e) })));\\\\n\\\\n\\\\n    params.push(\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Rotation\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: 360,\\\\n      step: 1,\\\\n      value: active.a.rot,\\\\n      onChange: e => props.setArcParam(\\\\\\\"rot\\\\\\\", e) })));\\\\n\\\\n\\\\n    // params.push(\\\\n    // React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    // React.createElement(Control, {\\\\n    //   name: \\\\\\\"Large arc sweep flag\\\\\\\",\\\\n    //   type: \\\\\\\"checkbox\\\\\\\",\\\\n    //   checked: active.a.laf,\\\\n    //   onChange: e => props.setArcParam(\\\\\\\"laf\\\\\\\", e) })));\\\\n\\\\n\\\\n    // params.push(\\\\n    // React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    // React.createElement(Control, {\\\\n    //   name: \\\\\\\"Sweep flag\\\\\\\",\\\\n    //   type: \\\\\\\"checkbox\\\\\\\",\\\\n    //   checked: active.a.sf,\\\\n    //   onChange: e => props.setArcParam(\\\\\\\"sf\\\\\\\", e) })));\\\\n\\\\n\\\\n  }\\\\n\\\\n  return (\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls\\\\\\\" },\\\\n    React.createElement(\\\\\\\"h3\\\\\\\", { className: \\\\\\\"ad-Controls-title\\\\\\\" }, \\\\\\\"Parameters\\\\\\\"),\\\\n\\\\n\\\\n\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Width\\\\\\\",\\\\n      type: \\\\\\\"text\\\\\\\",\\\\n      value: props.w,\\\\n      onChange: e => props.setWidth(e) }),\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Height\\\\\\\",\\\\n      type: \\\\\\\"text\\\\\\\",\\\\n      value: props.h,\\\\n      onChange: e => props.setHeight(e) }),\\\\n\\\\n      React.createElement(Control, {\\\\n      name: \\\\\\\"offsetX\\\\\\\",\\\\n      type: \\\\\\\"text\\\\\\\",\\\\n      // value: 0,\\\\n      onChange: e => props._setStartPositionX(e) }),\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"offsetY\\\\\\\",\\\\n      type: \\\\\\\"text\\\\\\\",\\\\n      // value: 0,\\\\n      onChange: e => props._setStartPositionY(e) }),\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Close path\\\\\\\",\\\\n      type: \\\\\\\"checkbox\\\\\\\",\\\\n      value: props.closePath,\\\\n      onChange: e => props.setClosePath(e) })),\\\\n\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Grid size\\\\\\\",\\\\n      type: \\\\\\\"text\\\\\\\",\\\\n      value: props.grid.size,\\\\n      onChange: e => props.setGridSize(e) }),\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Snap grid\\\\\\\",\\\\n      type: \\\\\\\"checkbox\\\\\\\",\\\\n      checked: props.grid.snap,\\\\n      onChange: e => props.setGridSnap(e) }),\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"convert path\\\\\\\",\\\\n      type: \\\\\\\"checkbox\\\\\\\",\\\\n      checked: props.grid.show,\\\\n      onChange: e => props.setGridShow(e) })),\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      type: \\\\\\\"button\\\\\\\",\\\\n      action: \\\\\\\"reset\\\\\\\",\\\\n      value: \\\\\\\"Reset path\\\\\\\",\\\\n      onClick: e => props.reset(e) })),\\\\n      \\\\n\\\\n      \\\\n\\\\n    React.createElement(\\\\\\\"h3\\\\\\\", { className: \\\\\\\"ad-Controls-title\\\\\\\" }, \\\\\\\"Selected point\\\\\\\"),\\\\n\\\\n\\\\n\\\\n    props.activePoint !== 0 &&\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Point type\\\\\\\",\\\\n      type: \\\\\\\"choices\\\\\\\",\\\\n      id: \\\\\\\"pointType\\\\\\\",\\\\n      choices: [\\\\n      { name: \\\\\\\"L\\\\\\\", value: \\\\\\\"l\\\\\\\", checked: !active.q && !active.c && !active.a },\\\\n      { name: \\\\\\\"C\\\\\\\", value: \\\\\\\"c\\\\\\\", checked: !!active.c }\\\\n      // { name: \\\\\\\"Q\\\\\\\", value: \\\\\\\"q\\\\\\\", checked: !!active.q },\\\\n      // { name: \\\\\\\"A\\\\\\\", value: \\\\\\\"a\\\\\\\", checked: !!active.a },\\\\n  \\\\n      ],\\\\n\\\\n      onChange: e => props.setPointType(e) })),\\\\n\\\\n      React.createElement(\\\\\\\"input\\\\\\\", {\\\\n      name: \\\\\\\"path input\\\\\\\",\\\\n      type: \\\\\\\"text\\\\\\\",\\\\n      onChange: e => props._setPathInput(e) }),\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Point X position\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.w,\\\\n      step: step,\\\\n      value: active.x,\\\\n      onChange: e => props.setPointPosition(\\\\\\\"x\\\\\\\", e) })),\\\\n\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      name: \\\\\\\"Point Y position\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: 0,\\\\n      max: props.h,\\\\n      step: step,\\\\n      value: active.y,\\\\n      onChange: e => props.setPointPosition(\\\\\\\"y\\\\\\\", e) })),\\\\n\\\\n\\\\n    params,\\\\n\\\\n    props.activePoint !== 0 &&\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Controls-container\\\\\\\" },\\\\n    React.createElement(Control, {\\\\n      type: \\\\\\\"button\\\\\\\",\\\\n      action: \\\\\\\"delete\\\\\\\",\\\\n      value: \\\\\\\"X\\\\\\\",\\\\n      onClick: e => props.removeActivePoint(e) })\\\\n    \\\\n      )));\\\\n\\\\n\\\\n}\\\\n\\\\nfunction Control(props) {\\\\n  const {\\\\n    name,\\\\n    type,\\\\n    ..._props } =\\\\n  props;\\\\n\\\\n  let control = \\\\\\\"\\\\\\\",label = \\\\\\\"\\\\\\\";\\\\n\\\\n  switch (type) {\\\\n    case \\\\\\\"range\\\\\\\":control = React.createElement(Range, _props);\\\\n      break;\\\\n    case \\\\\\\"text\\\\\\\":control = React.createElement(Text, _props);\\\\n      break;\\\\n    case \\\\\\\"checkbox\\\\\\\":control = React.createElement(Checkbox, _props);\\\\n      break;\\\\n    case \\\\\\\"button\\\\\\\":control = React.createElement(Button, _props);\\\\n      break;\\\\n    case \\\\\\\"choices\\\\\\\":control = React.createElement(Choices, _props);\\\\n      break;}\\\\n\\\\n\\\\n  if (name) {\\\\n    label =\\\\n    React.createElement(\\\\\\\"label\\\\\\\", { className: \\\\\\\"ad-Control-label\\\\\\\" },\\\\n    name);\\\\n\\\\n\\\\n  }\\\\n\\\\n  return (\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Control\\\\\\\" },\\\\n    label,\\\\n    control));\\\\n\\\\n\\\\n}\\\\n\\\\nfunction Choices(props) {\\\\n  let choices = props.choices.map((c, i) => {\\\\n    return (\\\\n      React.createElement(\\\\\\\"label\\\\\\\", { className: \\\\\\\"ad-Choice\\\\\\\" },\\\\n      React.createElement(\\\\\\\"input\\\\\\\", {\\\\n        className: \\\\\\\"ad-Choice-input\\\\\\\",\\\\n        type: \\\\\\\"radio\\\\\\\",\\\\n        value: c.value,\\\\n        checked: c.checked,\\\\n        name: props.id,\\\\n        onChange: props.onChange }),\\\\n      React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Choice-fake\\\\\\\" },\\\\n      c.name)));\\\\n\\\\n\\\\n\\\\n  });\\\\n\\\\n  return (\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Choices\\\\\\\" },\\\\n    choices));\\\\n\\\\n\\\\n}\\\\n\\\\nfunction Button(props) {\\\\n  return (\\\\n    React.createElement(\\\\\\\"button\\\\\\\", {\\\\n      className:\\\\n      \\\\\\\"ad-Button\\\\\\\" + (\\\\n      props.action ? \\\\\\\"  ad-Button--\\\\\\\" + props.action : \\\\\\\"\\\\\\\"),\\\\n\\\\n      type: \\\\\\\"button\\\\\\\",\\\\n      onClick: props.onClick },\\\\n    props.value));\\\\n\\\\n\\\\n}\\\\n\\\\nfunction Checkbox(props) {\\\\n  return (\\\\n    React.createElement(\\\\\\\"label\\\\\\\", { className: \\\\\\\"ad-Checkbox\\\\\\\" },\\\\n    React.createElement(\\\\\\\"input\\\\\\\", {\\\\n      className: \\\\\\\"ad-Checkbox-input\\\\\\\",\\\\n      type: \\\\\\\"checkbox\\\\\\\",\\\\n      onChange: props.onChange,\\\\n      checked: props.checked }),\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Checkbox-fake\\\\\\\" })));\\\\n\\\\n\\\\n}\\\\n\\\\nfunction Text(props) {\\\\n  return (\\\\n    React.createElement(\\\\\\\"input\\\\\\\", {\\\\n      className: \\\\\\\"ad-Text\\\\\\\",\\\\n      type: \\\\\\\"text\\\\\\\",\\\\n      value: props.value,\\\\n      onChange: props.onChange }));\\\\n\\\\n}\\\\n\\\\nfunction Range(props) {\\\\n  return (\\\\n    React.createElement(\\\\\\\"div\\\\\\\", { className: \\\\\\\"ad-Range\\\\\\\" },\\\\n    React.createElement(\\\\\\\"input\\\\\\\", {\\\\n      className: \\\\\\\"ad-Range-input\\\\\\\",\\\\n      type: \\\\\\\"range\\\\\\\",\\\\n      min: props.min,\\\\n      max: props.max,\\\\n      step: props.step,\\\\n      value: props.value,\\\\n      onChange: props.onChange }),\\\\n    React.createElement(\\\\\\\"input\\\\\\\", {\\\\n      className: \\\\\\\"ad-Range-text  ad-Text\\\\\\\",\\\\n      type: \\\\\\\"text\\\\\\\",\\\\n      value: props.value,\\\\n      onChange: props.onChange })));\\\\n\\\\n\\\\n}\\\\n\\\\nrender(\\\\nReact.createElement(Container, null),\\\\ndocument.querySelector(\\\\\\\"#app\\\\\\\"));\\\\n</script>\\\\n\\\\n</html>\\\"\\n}\"}"
}
