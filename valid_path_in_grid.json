{
        "title": "valid_path_in_grid",
        "description": "",
        "code":"const grid = [\n  [2, 4, 3],\n  [6, 5, 2],\n];\n\nconst hasValidPath = (grid) => {\n  const dir = [\n    [], // 0 sentinel\n    [[0, -1], [0, 1]], // 1 left  ðŸ‘ˆ / ðŸ‘‰ right\n    [[-1, 0], [1, 0]], // 2 upper ðŸ‘† / ðŸ‘‡ lower\n    [[0, -1], [1, 0]], // 3 left  ðŸ‘ˆ / ðŸ‘‡ lower\n    [[0, 1], [1, 0]], // 4 right ðŸ‘‰ / ðŸ‘‡ lower\n    [[0, -1], [-1, 0]], // 5 left  ðŸ‘ˆ / ðŸ‘† upper\n    [[0, 1], [-1, 0]], // 6 right ðŸ‘‰ / ðŸ‘† upper\n  ];\n\n  const gridHeight = grid.length;\n  const gridWidth = grid[0].length;\n  const queue = [[0, 0]];\n  const visited = new Set(['0,0']);\n\n  while (queue.length > 0) {\n    const [currentRow, currentCol] = queue[0];\n    queue.shift();\n\n    if (currentRow === gridHeight - 1 && currentCol === gridWidth - 1) {\n      return true;\n    }\n\n    const possibleDirections = dir[grid[currentRow][currentCol]];\n\n    for (const [rowStep, colStep] of possibleDirections) {\n      const newRow = rowStep + currentRow;\n      const newCol = colStep + currentCol;\n\n      if (\n        newRow < 0 ||\n        newCol < 0 ||\n        newRow >= gridHeight ||\n        newCol >= gridWidth ||\n        visited.has(`${newRow},${newCol}`)\n      ) {\n        continue;\n      }\n\n      const newPossibleDirections = dir[grid[newRow][newCol]];\n\n      for (const [rowStep, colStep] of newPossibleDirections) {\n        const nextRow = rowStep + newRow;\n        const nextCol = colStep + newCol;\n\n        if (nextRow === currentRow && nextCol === currentCol) {\n          visited.add(`${newRow},${newCol}`);\n          queue.push([newRow, newCol]);\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\nconsole.log(hasValidPath(grid));"
}
